{"version":3,"sources":["ApiController/ApiController.js","LoadingSpinners/LoadingSpinners.js","Home/Home.js","assets/AcerFullBrand.png","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["range","require","len","arr","i","push","downloadNode","Detail","name","description","version","releaseDate","size","downloadLink","GetDownloadList","a","fakeDownloadList","map","DataDetail","index","children","LoadingSpinners","CircularProgress","acerColor","useStyles","makeStyles","theme","button","color","border","tableHeadBGColor","background","tableHeadFontColor","Home","useState","downloadList","setDownloadList","classes","useEffect","rst","getData","downloadListData","className","TableContainer","component","Paper","Table","aria-label","TableHead","root","TableRow","TableCell","head","align","TableBody","row","scope","Button","outlined","variant","startIcon","onClick","link","window","open","App","navTextStyle","padding","value","render","location","history","Fragment","onSelect","selected","to","pathname","src","acerBrand","alt","defaultSelected","eventKey","style","float","basename","process","from","exact","path","props","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"mhBAMMA,GAFQC,EAAQ,KAER,SAAAC,GAEV,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EAAIF,EAAKE,IACrBD,EAAIE,KAAKD,GAEb,OAAOD,IAGLG,EAAe,SAACC,GAClB,MAAO,CACHC,KAAKD,EAAOC,KACZC,YAAYF,EAAOE,YACnBC,QAAQH,EAAOG,QACfC,YAAYJ,EAAOI,YACnBC,KAAKL,EAAOK,KACZC,aAAaN,EAAOM,eAerB,SAAeC,IAAtB,+B,4CAAO,sBAAAC,EAAA,+EAIIC,EAAiBC,KAAI,SAACC,EAAYC,GACrC,OAAO,2BACAb,EAAaY,IADpB,IAEIE,SAAUpB,EAAMmB,GAAOF,IAAIX,SAPhC,4C,4DChCQe,EADS,kBAAM,cAACC,EAAA,EAAD,K,gFCSxBC,EAAY,UAIZC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,OAAQ,CACNC,MAAOL,EACPM,OAAQ,aAEVC,iBAAkB,CACdC,WAAYR,GAEhBS,mBAAoB,CAChBJ,MAAO,eAIA,SAASK,IAAO,MAEaC,mBAAS,IAFtB,mBAEpBC,EAFoB,KAENC,EAFM,OAGiBF,mBAAS,IAH1B,mBAKrBG,GALqB,UAKXb,KAEhBc,qBAAU,WAAI,4CAEV,4BAAAvB,EAAA,sEACsBD,IADtB,OACUyB,EADV,OAEIH,EAAgBG,GAFpB,4CAFU,sBASV,OATU,mCAOVC,GAEO,eAKT,IAEF,IAoCMC,EAAqC,KAAjBN,EAEtB,qBAAKO,UAAU,oBAAf,SACI,cAAC,EAAD,MAIJ,qBAAKA,UAAU,oBAAf,SACI,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACI,eAACC,EAAA,EAAD,CAAOC,aAAW,eAAlB,UACI,cAACC,EAAA,EAAD,CAAWN,UAAU,YAAYL,QAAS,CAACY,KAAMZ,EAAQP,kBAAzD,SACI,eAACoB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWd,QAAS,CAACe,KAAMf,EAAQL,oBAAnC,yBACA,cAACmB,EAAA,EAAD,CAAWd,QAAS,CAACe,KAAMf,EAAQL,oBAAqBqB,MAAM,QAA9D,yBACA,cAACF,EAAA,EAAD,CAAWd,QAAS,CAACe,KAAMf,EAAQL,oBAAqBqB,MAAM,QAA9D,qBACA,cAACF,EAAA,EAAD,CAAWd,QAAS,CAACe,KAAMf,EAAQL,oBAAqBqB,MAAM,QAA9D,0BACA,cAACF,EAAA,EAAD,CAAWd,QAAS,CAACe,KAAMf,EAAQL,oBAAqBqB,MAAM,QAA9D,0BACA,cAACF,EAAA,EAAD,CAAWd,QAAS,CAACe,KAAMf,EAAQL,oBAAqBqB,MAAM,QAA9D,2BAIR,cAACC,EAAA,EAAD,UApDZnB,EAAalB,KAAI,SAACsC,GAAD,OACb,eAACL,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWP,UAAU,KAAKY,MAAM,MAAhC,SACKD,EAAI/C,OAET,cAAC2C,EAAA,EAAD,CAAWE,MAAM,QAAjB,SACKE,EAAI9C,cAET,cAAC0C,EAAA,EAAD,CAAWE,MAAM,QAAjB,SACKE,EAAI7C,UAET,cAACyC,EAAA,EAAD,CAAWE,MAAM,QAAjB,SACKE,EAAI5C,cAET,cAACwC,EAAA,EAAD,CAAWE,MAAM,QAAjB,SACKE,EAAI3C,OAET,cAACuC,EAAA,EAAD,CAAWE,MAAM,QAAjB,SACI,cAACI,EAAA,EAAD,CAAQpB,QAAS,CAACqB,SAAUrB,EAAQV,QAC5BgC,QAAQ,WACRC,UAAW,cAAC,IAAD,IACXC,QAAS,kBA1BHC,EA0B+BP,EAAI1C,aA1B3BkD,OAAOC,KAAKF,EAAM,UAA1B,IAAAA,GAuBd,0BAjBOP,EAAI/C,kBA6D3B,OACI,sBAAKkC,UAAU,WAAf,0BAEKD,EAED,uBAEA,qBAAKC,UAAU,gBAAf,0BC9HG,UAA0B,0C,iBCwF1BuB,MA5Ef,WAEI,IAAMC,EAAe,CAACC,QAAS,oBAE/B,OACI,gCACA,yBAAQzB,UAAU,SAAlB,UACI,sBAAMA,UAAU,yBAAhB,yBAEA,mCACI,wBAAmB0B,MAAM,OAAzB,yBAAY,QACZ,wBAAiBA,MAAM,KAAvB,qCAAY,YAIpB,cAAC,IAAD,UACI,cAAC,IAAD,CAAOC,OAAQ,gBAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,QAAb,OACX,eAAC,IAAMC,SAAP,WACI,eAAC,IAAD,CACI9B,UAAU,UACV+B,SAAU,SAACC,GACP,IAAMC,EAAK,IAAMD,EACbJ,EAASM,WAAaD,GACtBJ,EAAQlE,KAAKsE,IALzB,UASI,8BACI,qBAAKjC,UAAU,gBAAgBmC,IAAKC,EAAWC,IAAI,4BAGvD,eAAC,MAAD,CAAKrC,UAAU,cAAcsC,gBAAgB,OAA7C,UAEI,eAAC,UAAD,CAAStC,UAAU,sBAAsBuC,SAAS,OAAlD,UACI,cAAC,UAAD,CAASC,MAAO,CAACC,MAAO,QAAxB,SACI,cAAC,IAAD,CAAUzC,UAAU,cAExB,cAAC,UAAD,CAASwC,MAAOhB,EAAhB,qBAKJ,eAAC,UAAD,CAASxB,UAAU,sBAAsBuC,SAAS,UAAlD,UACI,cAAC,UAAD,CAASC,MAAO,CAACC,MAAO,QAAxB,SACI,cAAC,IAAD,CAAazC,UAAU,cAE3B,cAAC,UAAD,CAASwC,MAAOhB,EAAhB,wBAKJ,eAAC,UAAD,CAASxB,UAAU,sBAAsBuC,SAAS,SAAlD,UACI,cAAC,UAAD,CAASC,MAAO,CAACC,MAAO,QAAxB,SACI,cAAC,IAAD,CAAUzC,UAAU,cAExB,cAAC,UAAD,CAASwC,MAAOhB,EAAhB,6BAMZ,sBAAMxB,UAAU,OAAhB,SACI,eAAC,IAAD,CAAe0C,SAAWC,oBAA1B,UACI,cAAC,IAAD,CAAUC,KAAK,IAAIX,GAAG,QAAQY,OAAK,IACnC,cAAC,IAAD,CAAOC,KAAK,QAAQD,OAAK,EAAC3C,UAAW,SAAA6C,GAAK,OAAI,cAAC,EAAD,OAC9C,cAAC,IAAD,CAAOD,KAAK,UAAU5C,UAAW,SAAA6C,GAAK,OAAI,QAC1C,cAAC,IAAD,CAAOD,KAAK,UAAU5C,UAAW,SAAA6C,GAAK,OAAI,yBClEhEC,EAAcC,QACW,cAA7B5B,OAAOO,SAASsB,UAEe,UAA7B7B,OAAOO,SAASsB,UAEhB7B,OAAOO,SAASsB,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC9FjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASrD,OACD,cAAC,EAAD,IACNsD,SAASC,eAAe,SFWnB,SAAkB5B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI4B,IAAIxC,oBAAwBtB,OAAOO,SAASwD,MACpDC,SAAWhE,OAAOO,SAASyD,OAIvC,OAGFhE,OAAOiE,iBAAiB,QAAQ,WAC9B,IAAMjC,EAAK,UAAMV,oBAAN,sBAEPK,IAgEV,SAAiCK,EAAOC,GAEtCiC,MAAMlC,EAAO,CACXmC,QAAS,CAAE,iBAAkB,YAE5B9B,MAAK,SAAC+B,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CtC,UAAUC,cAAcsC,MAAMpC,MAAK,SAACC,GAClCA,EAAaoC,aAAarC,MAAK,WAC7BrC,OAAOO,SAASoE,eAKpB5C,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFV8B,CAAwB5C,EAAOC,GAI/BC,UAAUC,cAAcsC,MAAMpC,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OEjC/B4C,GAKA1B,K","file":"static/js/main.146abce7.chunk.js","sourcesContent":["// for testing\r\nimport fakeDeviceInfo from './fakeDeviceInfo.json';\r\nimport fakeDownloadList from './fakeDownloadList.json';\r\n\r\nconst fetch = require('node-fetch');\r\n\r\nconst range = len => {\r\n    const arr = [];\r\n    for (let i = 0; i < len; i++) {\r\n        arr.push(i);\r\n    }\r\n    return arr;\r\n};\r\n\r\nconst downloadNode = (Detail) => {\r\n    return {\r\n        name:Detail.name,\r\n        description:Detail.description,\r\n        version:Detail.version,\r\n        releaseDate:Detail.releaseDate,\r\n        size:Detail.size,\r\n        downloadLink:Detail.downloadLink\r\n    };\r\n};\r\n\r\nconst deviceInfoNode = (Detail) => {\r\n    return {\r\n        modelname:Detail.ModelName,\r\n        snid:Detail.SNID,\r\n        sn:Detail.SN,\r\n        os:Detail.OS,\r\n        biosversion:Detail.BIOSVersion,\r\n        lastchecktime:Detail.Lastchecktime\r\n    };\r\n};\r\n\r\nexport async function GetDownloadList () {\r\n\r\n    // access fake data\r\n\r\n    return fakeDownloadList.map((DataDetail, index) => {\r\n        return {\r\n            ...downloadNode(DataDetail),\r\n            children: range(index).map(downloadNode)\r\n        };\r\n    });\r\n\r\n}\r\n\r\nexport function GetDeviceInfo () {\r\n\r\n}","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst LoadingSpinners = () => <CircularProgress/>;\r\nexport default LoadingSpinners;\r\n","import React, { useState, useEffect  } from 'react';\r\nimport '../scss/home.scss'\r\n\r\nimport { GetDownloadList } from '../ApiController/ApiController'\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadingSpinners from '../LoadingSpinners/LoadingSpinners';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport { TableContainer, Table, TableCell, TableHead, TableRow , TableBody } from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst acerColor = '#83B81A';\r\nconst predatorColor = '#00beee;';\r\n\r\n// for modify material-ui component color\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      color: acerColor,\r\n      border: '1px solid'\r\n    },\r\n    tableHeadBGColor: {\r\n        background: acerColor\r\n    },\r\n    tableHeadFontColor: {\r\n        color: '#FFFFFF'\r\n    }\r\n  }));\r\n\r\nexport default function Home() {\r\n    // 宣告一個新的 state 變數，我們叫他「downloadList」\r\n    const [downloadList, setDownloadList] = useState('');\r\n    const [deviceInfoList, setDeviceInfoList] = useState('');\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(()=>{\r\n         /* 下面是 componentDidMount*/\r\n        async function getData() {\r\n            const rst = await GetDownloadList();\r\n            setDownloadList(rst);\r\n        }\r\n\r\n        getData();\r\n        /* 上面是 componentDidMount */\r\n        return () => {\r\n            /* 下面是 componentWillUnmount */\r\n            /* 上面是 componentWillUnmount */\r\n          };\r\n\r\n    },[/* 第二個參數是用來限定當哪些變數被改變時useEffect要觸發 */])\r\n\r\n    const downloadButtonOnClick = link => window.open(link, '_blank');\r\n\r\n    const CreateTableContent = () => {\r\n\r\n        const rst =\r\n        downloadList.map((row) => (\r\n            <TableRow key={row.name}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                    {row.name}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                    {row.description}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                    {row.version}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                    {row.releaseDate}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                    {row.size}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                    <Button classes={{outlined: classes.button}}\r\n                            variant=\"outlined\"\r\n                            startIcon={<GetAppIcon/>}\r\n                            onClick={() => downloadButtonOnClick(row.downloadLink)}>\r\n                        Download\r\n                    </Button>\r\n                </TableCell>\r\n            </TableRow>\r\n        ))\r\n\r\n        return rst;\r\n    }\r\n\r\n    const downloadListData = (downloadList === '')?\r\n    (\r\n        <div className=\"homepage-download\">\r\n            <LoadingSpinners/>\r\n        </div>\r\n    ):\r\n    (\r\n        <div className=\"homepage-download\">\r\n            <TableContainer component={Paper}>\r\n                <Table aria-label=\"simple table\">\r\n                    <TableHead className=\"tableHead\" classes={{root: classes.tableHeadBGColor}}>\r\n                        <TableRow >\r\n                            <TableCell classes={{head: classes.tableHeadFontColor}}>Driver Name</TableCell>\r\n                            <TableCell classes={{head: classes.tableHeadFontColor}} align=\"right\">Description</TableCell>\r\n                            <TableCell classes={{head: classes.tableHeadFontColor}} align=\"right\">Version</TableCell>\r\n                            <TableCell classes={{head: classes.tableHeadFontColor}} align=\"right\">Release Date</TableCell>\r\n                            <TableCell classes={{head: classes.tableHeadFontColor}} align=\"right\">Package Size</TableCell>\r\n                            <TableCell classes={{head: classes.tableHeadFontColor}} align=\"right\">Download</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {CreateTableContent()}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"homepage\">\r\n            download Area\r\n            {downloadListData}\r\n\r\n            <hr/>\r\n\r\n            <div className=\"homepage-info\">\r\n                info Area\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/AcerFullBrand.c91e03a4.png\";","import React from 'react';\r\nimport { BrowserRouter, Router, Route, Redirect } from 'react-router-dom'\r\n\r\nimport './scss/app.scss';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport DevicesIcon from '@material-ui/icons/Devices';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport Home from './Home/Home'\r\nimport acerBrand from './assets/AcerFullBrand.png'\r\n\r\nimport SideNav, { Nav, NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';\r\n\r\nfunction App() {\r\n\r\n    const navTextStyle = {padding: '0px 0px 0px 45px'};\r\n\r\n    return (\r\n        <div>\r\n        <header className=\"header\">\r\n            <span className=\"header-languagesetting\">Language : </span>\r\n\r\n            <select>\r\n                <option key=\"enus\" value=\"enus\">English (US)</option>\r\n                <option key=\"tc\" value=\"tc\">繁體中文</option>\r\n            </select>\r\n        </header>\r\n\r\n        <Router >\r\n            <Route render={({ location, history }) => (\r\n                <React.Fragment>\r\n                    <SideNav\r\n                        className=\"sidenav\"\r\n                        onSelect={(selected) => {\r\n                            const to = '/' + selected;\r\n                            if (location.pathname !== to) {\r\n                                history.push(to);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <div>\r\n                            <img className=\"sidenav-brand\" src={acerBrand} alt=\"acer care center lite\"/>\r\n                        </div>\r\n\r\n                        <Nav className=\"sidenav-nav\" defaultSelected=\"home\">\r\n\r\n                            <NavItem className=\"sidenav-nav-navitem\" eventKey=\"home\">\r\n                                <NavIcon style={{float: 'left'}}>\r\n                                    <HomeIcon className=\"navicon\"/>\r\n                                </NavIcon>\r\n                                <NavText style={navTextStyle}>\r\n                                    Home\r\n                                </NavText>\r\n                            </NavItem>\r\n\r\n                            <NavItem className=\"sidenav-nav-navitem\" eventKey=\"devices\">\r\n                                <NavIcon style={{float: 'left'}}>\r\n                                    <DevicesIcon className=\"navicon\"/>\r\n                                </NavIcon>\r\n                                <NavText style={navTextStyle}>\r\n                                    Devices\r\n                                </NavText>\r\n                            </NavItem>\r\n\r\n                            <NavItem className=\"sidenav-nav-navitem\" eventKey=\"others\">\r\n                                <NavIcon style={{float: 'left'}}>\r\n                                    <InfoIcon className=\"navicon\"/>\r\n                                </NavIcon>\r\n                                <NavText style={navTextStyle}>\r\n                                    Others\r\n                                </NavText>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </SideNav>\r\n                    <main className=\"main\">\r\n                        <BrowserRouter basename={ process.env.PUBLIC_URL }>\r\n                            <Redirect from=\"/\" to=\"/home\" exact />\r\n                            <Route path=\"/home\" exact component={props => <Home/>} />\r\n                            <Route path=\"/device\" component={props => null} />\r\n                            <Route path=\"/others\" component={props => null} />\r\n                        </BrowserRouter>\r\n                    </main>\r\n                </React.Fragment>\r\n            )}\r\n            />\r\n        </Router>\r\n        </div>\r\n    );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n        <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}